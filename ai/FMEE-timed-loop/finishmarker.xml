<?xml version="1.0" encoding="utf-8"?>

<PropertyList>

  <path>largemarker.ac</path>

  <nasal>
    <load>
      <![CDATA[
srand(); # set seed for random generator

var root = cmdarg();
var rootindex = root.getIndex();
var markerPath = "/ai/models/aircraft["~ rootindex ~"]/";

var greenFlash = func()
{
    settimer(func{ interpolate("/fmee-loop-timer/color-red", 1, 0.6); }, 0.2);
    interpolate("/fmee-loop-timer/color-red", 0.35, 0.2);
}

var markerCoord = geo.Coord.new();
markerCoord.set_latlon(
    getprop(markerPath ~"position/latitude-deg"),
    getprop(markerPath ~"position/longitude-deg"),
    getprop(markerPath ~"position/altitude-ft")
);

var planeCoord = geo.Coord.new();
props.globals.initNode("/fmee-loop-timer/starttime", 0, "DOUBLE");
props.globals.initNode("/fmee-loop-timer/finished-notcleared", 0, "BOOL");
props.globals.initNode("/fmee-loop-timer/finish-delay", 1, "BOOL");

var checkWaypts = func()
{
    var wayptsNode = props.globals.getNode("/fmee-loop-timer");
    forindex(var i; wayptsNode.getChildren("waypoint"))
    {
        if(getprop("/fmee-loop-timer/waypoint["~ i ~"]/passed") == 0) return 0;
    }
    return 1;
}

var distLoop = maketimer(0.1,
    func()
    {
        if(distLoop == nil) return;

        if(getprop("/fmee-loop-timer/starttime") > 0)
        {
            planeCoord.set_latlon(
                getprop("/position/latitude-deg"),
                getprop("/position/longitude-deg"),
                getprop("/position/altitude-ft")
            );
            var dist = markerCoord.direct_distance_to(planeCoord);
            var ubody = getprop("/velocities/uBody-fps");
            var vbody = getprop("/velocities/vBody-fps");
            var wbody = getprop("/velocities/wBody-fps");
            var velocity = 0.3048 * math.sqrt(ubody * ubody + vbody * vbody + wbody * wbody);

            var time1 = dist / velocity / 8;
            var looptime = time1;
            if(time1 < 0.1) looptime = 0.0001;

            if(time1 > 20) looptime = 19 + 2 * rand();

            if(dist < 100)
            {
                if(checkWaypts())
                {
                    var difftime = getprop("/sim/time/elapsed-sec") - getprop("/fmee-loop-timer/starttime");
                    var decimals = int((difftime - int(difftime)) * 100);
                    var timeString = int(difftime) ~"."~ ((decimals < 10) ? ("0"~ decimals) : decimals);
                    setprop("/sim/multiplay/chat", getprop("/sim/multiplay/callsign") ~" ("~ getprop("/sim/aircraft") ~") finished FMEE timed loop with time "~ timeString ~" s");
                    setprop("/fmee-loop-timer/starttime", 0);
                    interpolate("/fmee-loop-timer/color-green", 0.5, 2);
                    #read logfile contents, write new stuff and close it
                    var txt = "";
                    call(func(){ txt = io.readfile(getprop("/sim/fg-home") ~"/fmee-loop-times.log"); }, nil, var err = []);
                    var file = io.open(getprop("/sim/fg-home") ~"/fmee-loop-times.log", "w");
                    var mins = getprop("/sim/time/real/minute");
                    var secs = getprop("/sim/time/real/second");
                    var newTime =
                        getprop("/sim/time/real/day") ~"."~
                        getprop("/sim/time/real/month") ~"."~
                        getprop("/sim/time/real/year") ~", "~
                        getprop("/sim/time/real/hour") ~":"~
                        ((mins < 10) ? "0" : "") ~ mins ~":"~
                        ((secs < 10 ) ? "0" : "") ~ secs ~", "~
                        getprop("/sim/multiplay/callsign") ~", "~
                        getprop("/sim/aircraft") ~", "~
                        timeString;
                    io.write(file, txt ~ newTime ~"\n");
                    io.close(file);
                    screen.log.write("time: "~ newTime);
                    print("time: "~ newTime);
                    screen.log.write("Writing time to file "~ getprop("/sim/fg-home") ~"/fmee-loop-times.log");
                    print("Writing time to file "~ getprop("/sim/fg-home") ~"/fmee-loop-times.log");
                }
                else if(getprop("/fmee-loop-timer/finish-delay"))
                {
                    setprop("/fmee-loop-timer/finished-notcleared", 1);
                    setprop("/sim/multiplay/chat", "Awww, "~ getprop("/sim/multiplay/callsign") ~" ("~ getprop("/sim/aircraft") ~") finished FMEE timed loop without clearing all waypoints...");
                    setprop("/fmee-loop-timer/finish-delay", 0);
                    settimer(func(){ setprop("/fmee-loop-timer/finish-delay", 1); }, 5);
                }
                greenFlash();
            }
            distLoop.restart(looptime);
        }
    }
);
distLoop.singleShot = 1;
var listenStarttime = setlistener("/fmee-loop-timer/starttime", func(){ distLoop.restart(0.2); });
distLoop.start();
      ]]>
    </load>
    <unload>
      <![CDATA[
#screen.log.write("Mach Loop finish unloaded");
print("FMEE timed loop finish unloaded");
removelistener(listenStarttime);
distLoop.stop();
distLoop = nil;
      ]]>
    </unload>
  </nasal>

  <animation>
    <type>noshadow</type>
    <object-name>marker1</object-name>
  </animation>

  <animation>
    <type>alpha-test</type>
    <alpha-factor>0.01</alpha-factor>
  </animation>

  <effect>
    <inherits-from>Effects/model-transparent</inherits-from>
    <condition>
      <property>/sim/rendering/rembrandt/enabled</property>
    </condition>
    <object-name>marker1</object-name>
  </effect>

  <animation>
    <type>material</type>
    <object-name>marker1</object-name>
    <emission>
      <red>1</red>
      <green>0</green>
      <blue>1</blue>
    </emission>
  </animation>

</PropertyList>
